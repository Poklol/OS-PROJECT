#!/bin/bash

echo "╔════════════════════════════════════════════════════════════════╗"
echo "║    MATRIX MULTIPLICATION WITH IPC & MULTITHREADING DEMO       ║"
echo "║              Group 32 - Operating Systems Assignment           ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""
echo "📋 PRESS ENTER TO CONTINUE THROUGH THE DEMONSTRATION..."
read

echo ""
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║                    PROGRAM ARCHITECTURE                        ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""
echo "Our Matrix Multiplication System consists of:"
echo ""
echo "🏗️  COMPONENTS:"
echo "   • scheduler.c - Main coordinator (round-robin scheduler)"
echo "   • P1.c (1.out) - Matrix reader & shared memory creator"
echo "   • P2.c (2.out) - Matrix multiplier using shared memory"
echo ""
echo "⚡ KEY FEATURES:"
echo "   • Inter-Process Communication (IPC) via shared memory"
echo "   • Multi-threading for parallel matrix operations"
echo "   • Round-robin process scheduling"
echo "   • Performance measurement and visualization"
echo ""
echo "📊 PERFORMANCE DATA:"
echo "   • Runtime measurements for different thread counts"
echo "   • Multiple matrix sizes tested (121, 225, 900, 2500)"
echo "   • CSV logging for analysis"
echo ""
read

echo ""
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║                     MATRIX INPUT FILES                         ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""
echo "📁 INPUT MATRICES:"
echo "   • in1.txt - First matrix (10 × 100)"
echo "   • in2.txt - Second matrix (100 × 100)"
echo ""
echo "Matrix multiplication: (10×100) × (100×100) = (10×100)"
echo ""
echo "Sample data from input files:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
head -2 in1.txt | cut -d' ' -f1-10
echo "   [... more numbers ...]"
echo ""
head -2 in2.txt | cut -d' ' -f1-10  
echo "   [... more numbers ...]"
echo ""
read

echo ""
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║                    EXECUTION DEMONSTRATION                     ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""
echo "🚀 STARTING MATRIX MULTIPLICATION..."
echo ""
echo "Command: ./scheduler 10 100 100 in1.txt in2.txt out.txt"
echo ""
echo "Parameters:"
echo "   • 10 = rows of first matrix"
echo "   • 100 = columns of first matrix / rows of second matrix"  
echo "   • 100 = columns of second matrix"
echo ""
echo "The scheduler will:"
echo "   1. Create two child processes (P1 and P2)"
echo "   2. Implement round-robin scheduling between them"
echo "   3. P1 reads matrices and creates shared memory"
echo "   4. P2 performs matrix multiplication"
echo "   5. Generate performance logs"
echo ""
read

echo ""
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║                    PERFORMANCE RESULTS                         ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""
echo "📈 P1 PERFORMANCE (Matrix Reading Phase):"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
cat values_P1.csv
echo ""
echo ""
echo "📈 P2 PERFORMANCE (Matrix Multiplication Phase):"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
cat values_P2.csv
echo ""
echo ""
echo "📊 PERFORMANCE ANALYSIS:"
echo "   • Data format: Runtime(ns), Threads, Matrix_Size"
echo "   • Tested with 1-10 threads for each matrix size"
echo "   • Smaller matrices benefit from more threads"
echo "   • Optimal performance varies by workload size"
echo ""
read

echo ""
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║                    GENERATED GRAPHS                           ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""
echo "📊 VISUALIZATION FILES CREATED:"
echo ""
ls -la *_performance_graph.png
echo ""
echo ""
echo "🎯 GRAPH FEATURES:"
echo "   • Runtime vs Thread count for different matrix sizes"
echo "   • Separate graphs for P1 (reading) and P2 (multiplication)"
echo "   • Visual representation of threading efficiency"
echo "   • Easy identification of optimal thread configurations"
echo ""
read

echo ""
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║                    OUTPUT VERIFICATION                        ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""
echo "✨ FINAL RESULTS:"
echo ""
echo "📁 Generated files:"
ls -la out.txt values*.csv *_performance_graph.png
echo ""
echo ""
echo "🔍 SAMPLE OUTPUT MATRIX (first few elements):"
echo "   Note: Full 10×100 result matrix in out.txt"
echo ""
read

echo ""
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║                    KEY LEARNING POINTS                        ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""
echo "🎓 CONCEPTS DEMONSTRATED:"
echo ""
echo "⚡ INTER-PROCESS COMMUNICATION (IPC):"
echo "   • Shared memory segments for data exchange"
echo "   • Synchronization between processes"
echo ""
echo "🧵 MULTITHREADING:"
echo "   • Parallel matrix operations"
echo "   • Thread pool management"
echo "   • Mutex locking for data protection"
echo ""
echo "⏰ PROCESS SCHEDULING:"
echo "   • Round-robin scheduling algorithm"
echo "   • Time quantum management (2 microseconds)"
echo "   • Context switching between P1 and P2"
echo ""
echo "📊 PERFORMANCE ANALYSIS:"
echo "   • Runtime measurement and logging"
echo "   • Thread scaling efficiency"
echo "   • Data visualization with graphs"
echo ""
echo "🏆 ACHIEVEMENTS:"
echo "   • Successful parallel matrix multiplication"
echo "   • Demonstrated OS concepts in practice"
echo "   • Performance optimization through threading"
echo ""
read

echo ""
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║                    DEMONSTRATION COMPLETE                     ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""
echo "🎉 Thank you for watching our Matrix Multiplication System demo!"
echo ""
echo "📋 SUMMARY:"
echo "   ✅ IPC via shared memory implemented"
echo "   ✅ Multi-threading for parallel processing"
echo "   ✅ Round-robin process scheduling"
echo "   ✅ Performance measurement and visualization"
echo "   ✅ Real-world application of OS concepts"
echo ""
echo "🔗 Files generated for review:"
echo "   • Performance graphs: P1_performance_graph.png, P2_performance_graph.png"
echo "   • Performance data: values_P1.csv, values_P2.csv"
echo "   • Source code: scheduler.c, P1.c, P2.c"
echo ""
